# This file is used to configure the Travis CI tests of wirino

# Although sudo is no longer required by arduino-ci-script since the 1.0.0 release, for some reason setting "sudo: false" causes the Travis CI build time to significantly increase so this setting is left as "sudo: required"
sudo: required


env:
  global:
    # The Arduino IDE will be installed at APPLICATION_FOLDER/arduino
    - APPLICATION_FOLDER="${HOME}/arduino-ide"
    - SKETCHBOOK_FOLDER="${HOME}/Arduino"

    # Recent landmark IDE versions
    - IDE_VERSION_LIST='("1.6.5-r5" "1.6.9" "1.6.11" "1.6.13" "1.8.5" "newest")'
    # LTO requires Arduino AVR Boards 1.6.12 (bundled with Arduino IDE 1.6.10) or newer. However, Arduino IDE 1.6.10 and Arduino AVR Boards 1.6.12 had some serious issues so that version is skipped.
    - OLDEST_IDE_VERSION_TO_TEST_WITH_LTO='1.6.11'


before_install:
  # Formatting checks:
  # Check for files starting with a blank line
  - find . -path './.git' -prune -or -path './avr/bootloaders' -prune -or -type f -print0 | xargs -0 -L1 bash -c 'head -1 "$0" | grep --binary-files=without-match --regexp="^$"; if [[ "$?" == "0" ]]; then echo "Blank line found at start of $0."; false; fi'
  # Check for tabs
  - find . -path './.git' -prune -or -path './avr/bootloaders' -prune -or \( -not -name 'keywords.txt' -and -type f \) -exec grep --with-filename --line-number --binary-files=without-match --regexp=$'\t' '{}' \; -exec echo 'Tab found.' \; -exec false '{}' +
  # Check for trailing whitespace
  - find . -path './.git' -prune -or -path './avr/bootloaders' -prune -or -type f -exec grep --with-filename --line-number --binary-files=without-match --regexp='[[:blank:]]$' '{}' \; -exec echo 'Trailing whitespace found.' \; -exec false '{}' +
  # Check for non-Unix line endings
  - find . -path './.git' -prune -or -path './avr/bootloaders' -prune -or -type f -exec grep --files-with-matches --binary-files=without-match --regexp=$'\r$' '{}' \; -exec echo 'Non-Unix EOL detected.' \; -exec false '{}' +
  # Check for blank lines at end of files
  - find . -path './.git' -prune -or -path './avr/bootloaders' -prune -or -type f -print0 | xargs -0 -L1 bash -c 'tail -1 "$0" | grep --binary-files=without-match --regexp="^$"; if [[ "$?" == "0" ]]; then echo "Blank line found at end of $0."; false; fi'
  # Check for files that don't end in a newline (https://stackoverflow.com/a/25686825)
  - find . -path './.git' -prune -or -path './avr/bootloaders' -prune -or -type f -print0 | xargs -0 -L1 bash -c 'if test "$(grep --files-with-matches --binary-files=without-match --max-count=1 --regexp='.*' "$0")" && test "$(tail --bytes=1 "$0")"; then echo "No new line at end of $0."; false; fi'

  - git clone https://github.com/per1234/arduino-ci-script.git "${HOME}/scripts"
  - cd "${HOME}/scripts"
  # Get new tags from the remote
  - git fetch --tags
  # Checkout the latest tag
  - git checkout $(git describe --tags `git rev-list --tags --max-count=1`)
  - source "${HOME}/scripts/arduino-ci-script.sh"

  # These functions can be used to get verbose output for debugging the script
  # set_script_verbosity can be set to values from 0 - 2 (verbosity off - maximum verbosity)
  #- set_script_verbosity 1
  # Setting set_verbose_output_during_compilation to true is the same as File > Preferences > Show verbose output during > compilation (check) in the Arduino IDE
  #- set_verbose_output_during_compilation 'true'

  - set_application_folder "$APPLICATION_FOLDER"
  - set_sketchbook_folder "$SKETCHBOOK_FOLDER"

  # Check for board definition errors that don't affect compilation
  - set_board_testing 'true'

  # Check for library issues that don't affect compilation
  - set_library_testing 'false'

  # Install all IDE version required by the job
  - install_ide "$IDE_VERSION_LIST"

  # Install wirino from the repository
  - install_package

  # Install hardware package dependencies
  - install_package 'MightyCore:avr' 'https://mcudude.github.io/MightyCore/package_MCUdude_MightyCore_index.json'
  - install_package 'MegaCore:avr' 'https://mcudude.github.io/MegaCore/package_MCUdude_MegaCore_index.json'


script:
  - build_sketch "${APPLICATION_FOLDER}/arduino/examples/01.Basics/BareMinimum/BareMinimum.ino" 'wirino:avr:WiringS:clock=16MHz,BOD=2V7,bootloader=wiring,EESAVE=yes,LTO=no' 'false' "all"
  - build_sketch "${APPLICATION_FOLDER}/arduino/examples/01.Basics/BareMinimum/BareMinimum.ino" 'wirino:avr:WiringS:clock=8MHz,BOD=4V3,bootloader=optiboot,EESAVE=no,LTO=yes' 'false' "$OLDEST_IDE_VERSION_TO_TEST_WITH_LTO" 'newest'
  - build_sketch "${APPLICATION_FOLDER}/arduino/examples/01.Basics/BareMinimum/BareMinimum.ino" 'wirino:avr:WiringS:clock=16MHz,BOD=1V8,bootloader=none,EESAVE=yes,LTO=no' 'false' 'all'
  - build_sketch "${APPLICATION_FOLDER}/arduino/examples/01.Basics/BareMinimum/BareMinimum.ino" 'wirino:avr:WiringS:clock=16MHz,BOD=disabled,bootloader=wiring,EESAVE=yes,LTO=no' 'false' 'all'

  - build_sketch "${APPLICATION_FOLDER}/arduino/examples/01.Basics/BareMinimum/BareMinimum.ino" 'wirino:avr:WiringSPlayShield:clock=16MHz,BOD=2V7,bootloader=wiring,EESAVE=yes,LTO=no' 'false' 'all'
  - build_sketch "${APPLICATION_FOLDER}/arduino/examples/01.Basics/BareMinimum/BareMinimum.ino" 'wirino:avr:WiringSPlayShield:clock=8MHz,BOD=4V3,bootloader=optiboot,EESAVE=no,LTO=yes' 'false' "$OLDEST_IDE_VERSION_TO_TEST_WITH_LTO" 'newest'
  - build_sketch "${APPLICATION_FOLDER}/arduino/examples/01.Basics/BareMinimum/BareMinimum.ino" 'wirino:avr:WiringSPlayShield:clock=16MHz,BOD=1V8,bootloader=none,EESAVE=yes,LTO=no' 'false' 'all'
  - build_sketch "${APPLICATION_FOLDER}/arduino/examples/01.Basics/BareMinimum/BareMinimum.ino" 'wirino:avr:WiringSPlayShield:clock=16MHz,BOD=disabled,bootloader=wiring,EESAVE=yes,LTO=no' 'false' 'all'

  - build_sketch "${APPLICATION_FOLDER}/arduino/examples/01.Basics/BareMinimum/BareMinimum.ino" 'wirino:avr:WiringV1:clock=16MHz,BOD=2V7,bootloader=wiring,EESAVE=no,LTO=no' 'false' 'all'
  - build_sketch "${APPLICATION_FOLDER}/arduino/examples/01.Basics/BareMinimum/BareMinimum.ino" 'wirino:avr:WiringV1:clock=8MHz,BOD=4V0,bootloader=optiboot,EESAVE=yes,LTO=yes' 'false' "$OLDEST_IDE_VERSION_TO_TEST_WITH_LTO" 'newest'
  - build_sketch "${APPLICATION_FOLDER}/arduino/examples/01.Basics/BareMinimum/BareMinimum.ino" 'wirino:avr:WiringV1:clock=16MHz,BOD=disabled,bootloader=none,EESAVE=no,LTO=no' 'false' 'all'

  - build_sketch "${APPLICATION_FOLDER}/arduino/examples/01.Basics/BareMinimum/BareMinimum.ino" 'wirino:avr:WiringV1Sparkfun1281:clock=16MHz,BOD=2V7,bootloader=wiring,EESAVE=yes,LTO=no' 'false' 'all'
  - build_sketch "${APPLICATION_FOLDER}/arduino/examples/01.Basics/BareMinimum/BareMinimum.ino" 'wirino:avr:WiringV1Sparkfun1281:clock=8MHz,BOD=4V3,bootloader=optiboot,EESAVE=no,LTO=yes' 'false' "$OLDEST_IDE_VERSION_TO_TEST_WITH_LTO" 'newest'
  - build_sketch "${APPLICATION_FOLDER}/arduino/examples/01.Basics/BareMinimum/BareMinimum.ino" 'wirino:avr:WiringV1Sparkfun1281:clock=16MHz,BOD=1V8,bootloader=none,EESAVE=yes,LTO=no' 'false' 'all'
  - build_sketch "${APPLICATION_FOLDER}/arduino/examples/01.Basics/BareMinimum/BareMinimum.ino" 'wirino:avr:WiringV1Sparkfun1281:clock=16MHz,BOD=disabled,bootloader=wiring,EESAVE=yes,LTO=no' 'false' 'all'

  - build_sketch "${APPLICATION_FOLDER}/arduino/examples/01.Basics/BareMinimum/BareMinimum.ino" 'wirino:avr:WiringV1Sparkfun2561:clock=16MHz,BOD=2V7,bootloader=wiring,EESAVE=yes,LTO=no' 'false' 'all'
  - build_sketch "${APPLICATION_FOLDER}/arduino/examples/01.Basics/BareMinimum/BareMinimum.ino" 'wirino:avr:WiringV1Sparkfun2561:clock=8MHz,BOD=4V3,bootloader=optiboot,EESAVE=no,LTO=yes' 'false' "$OLDEST_IDE_VERSION_TO_TEST_WITH_LTO" 'newest'
  - build_sketch "${APPLICATION_FOLDER}/arduino/examples/01.Basics/BareMinimum/BareMinimum.ino" 'wirino:avr:WiringV1Sparkfun2561:clock=16MHz,BOD=1V8,bootloader=none,EESAVE=yes,LTO=no' 'false' 'all'
  - build_sketch "${APPLICATION_FOLDER}/arduino/examples/01.Basics/BareMinimum/BareMinimum.ino" 'wirino:avr:WiringV1Sparkfun2561:clock=16MHz,BOD=disabled,bootloader=wiring,EESAVE=yes,LTO=no' 'false' 'all'



after_script:
  # Determine user name and repository name from TRAVIS_REPO_SLUG so the configuration will automatically adjust to forks
  - USER_NAME="$(echo "$TRAVIS_REPO_SLUG" | cut -d'/' -f 1)"
  - REPOSITORY_NAME="$(echo "$TRAVIS_REPO_SLUG" | cut -d'/' -f 2)"
  # Commit a report of the job results to a folder named with the build number in the wirino branch of the CI-reports repository
  - publish_report_to_repository "$REPORT_GITHUB_TOKEN" "https://github.com/${USER_NAME}/CI-reports.git" "$REPOSITORY_NAME" "build_$(printf "%05d\n" "${TRAVIS_BUILD_NUMBER}")" 'false'

  # Print a tab separated report of all sketch verification results to the log
  - display_report


notifications:
  email:
    on_success: always
    on_failure: always
  webhooks:
    urls:
      - https://www.travisbuddy.com/
    on_success: never
    on_failure: always
